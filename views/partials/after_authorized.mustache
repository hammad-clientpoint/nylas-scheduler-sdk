<p>
  Signed in as <strong>{{ account.name }} ({{account.emailAddress}}).</strong>
  <form method="POST" action="/logout"><input type="submit" value="Log Out" /></form>
</p>

<hr />

<!-- Add the Nylas javascript for displaying built in scheduling UI -->
<script src="https://schedule.nylas.com/schedule-editor/v1.0/schedule-editor.js" type="text/javascript"></script>

<!-- Add a tiny dark mode implementation to demo theme support in the Nylas Scheduling UI -->
<style id="theme-overrides"></style>
<script>
let inDarkMode = true;
function toggleTheme() {
  inDarkMode = !inDarkMode;
  
  const styleEl = document.getElementById('theme-overrides');
  if (inDarkMode) {
    styleEl.textContent = 'body { background: #10171E; color: white; border-top: 4px solid #1B95E0; } button, input[type=submit] { color: #10171E; }';
  } else {
    styleEl.textContent = 'body { border-top: 4px solid #6130c2; }';
  }
}
toggleTheme();
</script>

<div style="position: absolute; top: 20px; right: 20px;">
<button onClick="toggleTheme()">Toggle Dark Mode</button></div>

<h4>Basic Integration</h4>
<p>
  The easiest way to integrate scheduling pages into your app is to use the
  instant schedule integration type and pass the user's Nylas access_token.
  When provided a Nylas access_token, the scheduling widget shows all pages that
  use that token.
</p>
<button id="show-pages">Manage Scheduling Pages</button>
<script>
  var btn = document.getElementById('show-pages');
  btn.addEventListener('click', function() {
    nylas.scheduler.show({
      auth: {
        // Nylas API token of the current user is provided to the modal
        accessToken: "{{ accessToken }}",
      },
      style: {
        tintColor: inDarkMode ? '#1B95E0' : '#6130c2',
        backgroundColor: inDarkMode ? '#222' : '#FFF',
      },
      defaults: {
        event: {
          title: 'Introductions',
          duration: 45,
        },
        reminders: [],
      },
    });
  });
</script>

<hr />

<h4>Server-side Integration</h4>
<p>
  This approach allows you to restrict the ability of users to create arbitrary scheduling pages
  and also allows for scheduling pages that use more than one Nylas API token. It does not require
  putting the Nylas API token in the client-side JavaScript.
</p><p>
  This flow is split into two parts:
  <ol>
  <li>
    Create a scheduling page via an API call to schedule.api.nylas.com.
  </li>
  <li>
    Show scheduling pages to the user by retrieving the pages that include the user's 
    Nylas API token on the fly. If only certain users should have permission to view or edit pages,
    you might want to filter the list that is returned using data in your application.
  </li>
  <li>
    Present the built-in configuration modal for individual pages using their edit tokens.
    (Optional! You could also build your own editing interface or not allow users to customize the pages.)
  </li>
  </ol>
</p>
<p>
  <table class="table">
    <thead>
      <tr>
        <th>Your Scheduling Pages</th>
        <th></th>
      </tr>
    </thead>

    {{#pages}}
      <tr>
        <td>
          {{name}}<br/>
          <a href="https://schedule.nylas.com/{{ slug }}">https://schedule.nylas.com/{{ slug }}</a>
        </td>
        <td>
          <button onclick="onEdit('{{edit_token}}')">Edit</button>
        </td>
      </tr>
    {{/pages}}
  </table>
  <script>
    function onEdit(pageEditToken) {
      nylas.scheduler.show({
        auth: {
          pageEditToken: pageEditToken,
        },
        style: {
          tintColor: inDarkMode ? '#1B95E0' : '#6130c2',
          backgroundColor: inDarkMode ? '#222' : '#FFF',
        },
      });
    }
  </script>
  <form action="#" method="POST" style="padding: 8px; margin-bottom: 50px;">
    <strong>Create a Scheduling Page</strong>
    <br/>
    <input type="text" name="name" placeholder="Name" />
    <input type="text" name="slug" placeholder="Slug (eg: /meet-me)" />
    <input type="text" name="event_title" placeholder="Event Title" />
    <input type="submit" value="Submit" />
  </form>
</p>
